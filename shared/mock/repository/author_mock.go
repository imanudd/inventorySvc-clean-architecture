// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/author.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/author.go -destination=./shared/mock/repository/author_mock.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/imanudd/inventorySvc-clean-architecture/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorRepositoryImpl is a mock of AuthorRepositoryImpl interface.
type MockAuthorRepositoryImpl struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorRepositoryImplMockRecorder
	isgomock struct{}
}

// MockAuthorRepositoryImplMockRecorder is the mock recorder for MockAuthorRepositoryImpl.
type MockAuthorRepositoryImplMockRecorder struct {
	mock *MockAuthorRepositoryImpl
}

// NewMockAuthorRepositoryImpl creates a new mock instance.
func NewMockAuthorRepositoryImpl(ctrl *gomock.Controller) *MockAuthorRepositoryImpl {
	mock := &MockAuthorRepositoryImpl{ctrl: ctrl}
	mock.recorder = &MockAuthorRepositoryImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorRepositoryImpl) EXPECT() *MockAuthorRepositoryImplMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthorRepositoryImpl) Create(ctx context.Context, req *domain.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAuthorRepositoryImplMockRecorder) Create(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthorRepositoryImpl)(nil).Create), ctx, req)
}

// GetByID mocks base method.
func (m *MockAuthorRepositoryImpl) GetByID(ctx context.Context, id int) (*domain.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAuthorRepositoryImplMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAuthorRepositoryImpl)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockAuthorRepositoryImpl) GetByName(ctx context.Context, name string) (*domain.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*domain.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockAuthorRepositoryImplMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockAuthorRepositoryImpl)(nil).GetByName), ctx, name)
}
