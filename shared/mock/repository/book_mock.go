// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/book.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/book.go -destination=./shared/mock/repository/book_mock.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/imanudd/inventorySvc-clean-architecture/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockBookRepositoryImpl is a mock of BookRepositoryImpl interface.
type MockBookRepositoryImpl struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryImplMockRecorder
	isgomock struct{}
}

// MockBookRepositoryImplMockRecorder is the mock recorder for MockBookRepositoryImpl.
type MockBookRepositoryImplMockRecorder struct {
	mock *MockBookRepositoryImpl
}

// NewMockBookRepositoryImpl creates a new mock instance.
func NewMockBookRepositoryImpl(ctrl *gomock.Controller) *MockBookRepositoryImpl {
	mock := &MockBookRepositoryImpl{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepositoryImpl) EXPECT() *MockBookRepositoryImplMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookRepositoryImpl) Create(ctx context.Context, req *domain.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBookRepositoryImplMockRecorder) Create(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookRepositoryImpl)(nil).Create), ctx, req)
}

// Delete mocks base method.
func (m *MockBookRepositoryImpl) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBookRepositoryImplMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookRepositoryImpl)(nil).Delete), ctx, id)
}

// DeleteBookByAuthorID mocks base method.
func (m *MockBookRepositoryImpl) DeleteBookByAuthorID(ctx context.Context, authorID, bookID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookByAuthorID", ctx, authorID, bookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookByAuthorID indicates an expected call of DeleteBookByAuthorID.
func (mr *MockBookRepositoryImplMockRecorder) DeleteBookByAuthorID(ctx, authorID, bookID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookByAuthorID", reflect.TypeOf((*MockBookRepositoryImpl)(nil).DeleteBookByAuthorID), ctx, authorID, bookID)
}

// GetByID mocks base method.
func (m *MockBookRepositoryImpl) GetByID(ctx context.Context, id int) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBookRepositoryImplMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBookRepositoryImpl)(nil).GetByID), ctx, id)
}

// GetLastBook mocks base method.
func (m *MockBookRepositoryImpl) GetLastBook(ctx context.Context) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBook", ctx)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBook indicates an expected call of GetLastBook.
func (mr *MockBookRepositoryImplMockRecorder) GetLastBook(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBook", reflect.TypeOf((*MockBookRepositoryImpl)(nil).GetLastBook), ctx)
}

// GetListBookByAuthorID mocks base method.
func (m *MockBookRepositoryImpl) GetListBookByAuthorID(ctx context.Context, authorID int) ([]*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBookByAuthorID", ctx, authorID)
	ret0, _ := ret[0].([]*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBookByAuthorID indicates an expected call of GetListBookByAuthorID.
func (mr *MockBookRepositoryImplMockRecorder) GetListBookByAuthorID(ctx, authorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBookByAuthorID", reflect.TypeOf((*MockBookRepositoryImpl)(nil).GetListBookByAuthorID), ctx, authorID)
}

// Update mocks base method.
func (m *MockBookRepositoryImpl) Update(ctx context.Context, req *domain.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBookRepositoryImplMockRecorder) Update(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookRepositoryImpl)(nil).Update), ctx, req)
}
