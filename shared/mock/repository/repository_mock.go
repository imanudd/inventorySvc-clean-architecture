// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/repository.go -destination=./shared/mock/repository/repository_mock.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	repository "github.com/imanudd/inventorySvc-clean-architecture/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryImpl is a mock of RepositoryImpl interface.
type MockRepositoryImpl struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryImplMockRecorder
	isgomock struct{}
}

// MockRepositoryImplMockRecorder is the mock recorder for MockRepositoryImpl.
type MockRepositoryImplMockRecorder struct {
	mock *MockRepositoryImpl
}

// NewMockRepositoryImpl creates a new mock instance.
func NewMockRepositoryImpl(ctrl *gomock.Controller) *MockRepositoryImpl {
	mock := &MockRepositoryImpl{ctrl: ctrl}
	mock.recorder = &MockRepositoryImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryImpl) EXPECT() *MockRepositoryImplMockRecorder {
	return m.recorder
}

// GetAuthorRepo mocks base method.
func (m *MockRepositoryImpl) GetAuthorRepo() repository.AuthorRepositoryImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorRepo")
	ret0, _ := ret[0].(repository.AuthorRepositoryImpl)
	return ret0
}

// GetAuthorRepo indicates an expected call of GetAuthorRepo.
func (mr *MockRepositoryImplMockRecorder) GetAuthorRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorRepo", reflect.TypeOf((*MockRepositoryImpl)(nil).GetAuthorRepo))
}

// GetBookRepo mocks base method.
func (m *MockRepositoryImpl) GetBookRepo() repository.BookRepositoryImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookRepo")
	ret0, _ := ret[0].(repository.BookRepositoryImpl)
	return ret0
}

// GetBookRepo indicates an expected call of GetBookRepo.
func (mr *MockRepositoryImplMockRecorder) GetBookRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookRepo", reflect.TypeOf((*MockRepositoryImpl)(nil).GetBookRepo))
}

// GetTransactionRepo mocks base method.
func (m *MockRepositoryImpl) GetTransactionRepo() repository.TransactionRepositoryImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionRepo")
	ret0, _ := ret[0].(repository.TransactionRepositoryImpl)
	return ret0
}

// GetTransactionRepo indicates an expected call of GetTransactionRepo.
func (mr *MockRepositoryImplMockRecorder) GetTransactionRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionRepo", reflect.TypeOf((*MockRepositoryImpl)(nil).GetTransactionRepo))
}

// GetUserRepo mocks base method.
func (m *MockRepositoryImpl) GetUserRepo() repository.UserRepositoryImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRepo")
	ret0, _ := ret[0].(repository.UserRepositoryImpl)
	return ret0
}

// GetUserRepo indicates an expected call of GetUserRepo.
func (mr *MockRepositoryImplMockRecorder) GetUserRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRepo", reflect.TypeOf((*MockRepositoryImpl)(nil).GetUserRepo))
}
